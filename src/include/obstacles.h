#ifndef _H_OBSTACLES_H_
#define _H_OBSTACLES_H_

#include "init.h"
#include "indicators.h"
#include <stdlib.h>

#define MAX_OBSTACLES 30
#define OBST_BUFF_SIZE 100

// Struct that stores one row of obsticles
typedef struct _row{
    // Array that stores obstacle positions in cirrent row
    // picked from list of all possible obsticle positions
    int obst[3];

    // Current position (z coordoinate) of row on the display
    float obst_zpos;
} Obstacle_row;

//All possible valid obstacle rows
extern int all_rows[7][3];

/* -------------------------------- */
/* --- QUEUE FUNCTIONS BEGINING --- */
/*
 * File   : queue.h
 * Author : zentut.com
 * Purpose: stack header file
 */

void init(int *head, int *tail);
void enqueue(Obstacle_row *q,int *tail, Obstacle_row element);
Obstacle_row dequeue(Obstacle_row *q,int *head);
int empty(int head,int tail);
int full(int tail,const int size);
void display(Obstacle_row *q,int head,int tail);

/* --- QUEUE FUNCTIONS END --- */
/* -------------------------------- */

// Array of pointers generated by new_obstacle_row()
// that stores OBST_BUFF_SIZE of buffered obstacle rows
extern Obstacle_row obst_buff[OBST_BUFF_SIZE];
int obst_buff_head;
int obst_buff_tail;

// Initalize array of obstacles
// that is represented by the queue
// filled with Obstacle_row structs
void init_obstacles(void);

// Function that randomly picks one of
// the all valid obstacle rows
Obstacle_row new_obstacle_row(void);

// Tmp Obstacle row struct for new row
Obstacle_row n_obst_row;

// Function that dequeues
// front obstacle row
void pop_front_row(void);


// Function that enqueues 
// new obstacle row picked by
// function new_obstacle_row
void add_new_row(Obstacle_row new_row);


#endif